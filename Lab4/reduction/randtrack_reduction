#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#include "defs.h"
#include "hash.h"

#define SAMPLES_TO_COLLECT     10000000
#define RAND_NUM_UPPER_BOUND     100000
#define NUM_SEED_STREAMS                        4

/* 
 * ECE454 Students: 
 * Please fill in the following team struct 
 */
team_t team = {
		"rand_score",                                                                        /* Team name */

		"Murton Liu",                                                                                /* Member full name */
		"1002734231",                                                                 /* Member student number */
		"murton.liu@mail.utoronto.ca",                                                                 /* Member email address */
};

unsigned num_threads;
unsigned samples_to_skip;

class sample;

class sample {
	unsigned my_key;
 public:
	sample *next;
	unsigned count;

	sample(unsigned the_key){my_key = the_key; count = 0;};
	unsigned key(){return my_key;}
	void print(FILE *f){printf("%d %d\n",my_key,count);}
};

typedef struct thread_params{
	int id;
	int start;
	int end;
	hash<sample, unsigned> hash_table;
}thread;

// This instantiates an empty hash table
// it is a C++ template, which means we define the types for
// the element and key value here: element is "class sample" and
// key value is "unsigned".    
hash<sample,unsigned> merged_h;

void *processHashes(void *args){
	thread *cur_thread = (thread*) args;
	int i,j,k;
	int rnum;
	unsigned key;
	sample *s;

	cur_thread->hash_table.setup(14);
	// process streams starting with different initial numbers
	for (i = cur_thread->start; i < cur_thread->end; i++){
		rnum = i;

		// collect a number of samples
		for (j=0; j<SAMPLES_TO_COLLECT; j++){

			// skip a number of samples
			for (k=0; k<samples_to_skip; k++){
				rnum = rand_r((unsigned int*)&rnum);
			}

			// force the sample to be within the range of 0..RAND_NUM_UPPER_BOUND-1
			key = rnum % RAND_NUM_UPPER_BOUND;

			// if this sample has not been counted before
			if (!(s = cur_thread->hash_table.lookup(key))){
	
				// insert a new element for it into the hash table
				s = new sample(key);
				cur_thread->hash_table.insert(s);
			}

			// increment the count for the sample
			s->count++;
		}
	}

}

int
main (int argc, char* argv[]){
	// Print out team information
	printf( "Team Name: %s\n", team.team );
	printf( "\n" );
	printf( "Student 1 Name: %s\n", team.name1 );
	printf( "Student 1 Student Number: %s\n", team.number1 );
	printf( "Student 1 Email: %s\n", team.email1 );
	printf( "\n" );

	// Parse program arguments
	if (argc != 3){
		printf("Usage: %s <num_threads> <samples_to_skip>\n", argv[0]);
		exit(1);    
	}
	sscanf(argv[1], " %d", &num_threads); // not used in this single-threaded version
	sscanf(argv[2], " %d", &samples_to_skip);

	// initialize a 16K-entry (2**14) hash of empty lists
	merged_h.setup(14);

	pthread_t *threads = (pthread_t*)malloc(sizeof(pthread_t) * num_threads);
	thread *new_thread = new thread[num_threads];

	int streams_per_thread = NUM_SEED_STREAMS / num_threads;

	for(int i = 0; i < num_threads; i++) {
		new_thread[i].id = i;
		new_thread[i].start = i * streams_per_thread;
		new_thread[i].end = i * streams_per_thread + streams_per_thread;    	

		if(pthread_create(&threads[i], NULL, processHashes, &new_thread[i]) != 0){
			printf("Error creating thread %d\n", i);
		}
	}

	for(int i = 0; i < num_threads; i++)
		pthread_join(threads[i], NULL);

	for(int i = 0; i < num_threads; i++)
		new_thread[i].hash_table.combine(&merged_h);

	// print a list of the frequency of all samples
	merged_h.print();
}
